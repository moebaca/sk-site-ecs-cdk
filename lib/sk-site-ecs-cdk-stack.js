"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkSiteEcsCdkStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
var shell = require('shelljs');
const path = require("path");
const ec2 = require("aws-cdk-lib/aws-ec2");
const ecs = require("aws-cdk-lib/aws-ecs");
const ecsPatterns = require("aws-cdk-lib/aws-ecs-patterns");
class SkSiteEcsCdkStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Using local Git client as a workaround to clone, build and push site assets as Docker image to ECR repo 
        // until Public ECR Repo support comes to CDK [https://github.com/aws/aws-cdk/issues/12162]
        if (!shell.which('git')) {
            shell.echo('Sorry, this deployment requires git installed on the local machine.');
            shell.exit(1);
        }
        if (shell.ls('stephen-krawczyk-site').code !== 0) {
            shell.exec('git clone https://github.com/moebaca/stephen-krawczyk-site.git');
        }
        // const image = new DockerImageAsset(this, 'SKSiteBuildImage', {
        //   directory: path.join(__dirname, '../stephen-krawczyk-site'),
        // });
        // new ecrDeploy.ECRDeployment(this, 'DeployDockerImage', {
        //   src: new ecrDeploy.DockerImageName(image.imageUri),
        //   dest: new ecrDeploy.DockerImageName(`${image.imageUri}:latest`),
        // });
        // Grab SK Docker Image from ECR
        // const repo = ecr.Repository.fromRepositoryName(this, 'SkSiteImage', `${image.imageUri}:latest`);
        // New VPC with 2 Availability Zones
        const vpc = new ec2.Vpc(this, "SKSiteVpc", {
            maxAzs: 2
        });
        // Associate to new ECS Cluster w/ Container Insights
        const cluster = new ecs.Cluster(this, "SKSiteCluster", {
            vpc: vpc
        });
        // EC2 Capacity - Free Tier Eligible
        cluster.addCapacity('SKSiteClusterCapacity', {
            instanceType: new ec2.InstanceType("t2.micro"),
            desiredCapacity: 1,
        });
        // const loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'SKService', {
        //   cluster,
        //   cpu: 256,
        //   memoryLimitMiB: 512,
        //   desiredCount: 1,
        //   circuitBreaker: { rollback: true },
        //   taskImageOptions: {
        //     image: ecs.ContainerImage.fromRegistry(image.imageUri)
        //   },
        //   publicLoadBalancer: true 
        // });
        // Create a load-balanced Fargate service and make it public
        // *Note* If using Mac M1 chip or other ARM CPU be sure to set the below Docker ENV variable
        // DOCKER_DEFAULT_PLATFORM='linux/amd64'
        // [https://github.com/aws/aws-cdk/issues/12472] - Can't pass in --platform
        const loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'SKService', {
            cluster,
            cpu: 256,
            memoryLimitMiB: 512,
            desiredCount: 1,
            circuitBreaker: { rollback: true },
            taskImageOptions: {
                image: ecs.ContainerImage.fromAsset(path.join(__dirname, '../stephen-krawczyk-site')),
            },
            publicLoadBalancer: true
        });
    }
}
exports.SkSiteEcsCdkStack = SkSiteEcsCdkStack;
22500000
    - EKS;
1.23
    - Windows;
Server;
2022;
on;
EKS;
1.232(k8s, only, starts, support);
for (Sv; 22; on)
    1.23;
-They;
're upgrading to svr 20h2 next month - support ends in August 2022
    - Next;
version;
of;
2022;
requires;
1.23;
before;
August
    - AWS;
should;
help;
to;
support;
flagger;
integration;
with (AWS)
    Load;
Balancers
    - on;
EKS;
teams;
roadmap;
for (2022
    - Does; MB; want)
    to;
implement;
it;
with (another)
    tech ? It : ;
'll be siginifact more effort on MB (don';
t;
want;
to;
build;
something;
if (AWS)
    doing;
it;
-Updates;
on;
credit;
front;
meet;
;
 > ;
pin + 4005882087;
+4005882087;
 > ;
Ashton, Helen < helenash;
 > ;
Walsh, Meghan < mgwal;
 > ;
Puthiyavettle, Ajit < aputhiy;
 > ;
Humphrey, Eric < humeric;
 > ;
bruce_andersen;
;
 > ;
jason_aubain;
;
 > ;
Mcdonough, Rich < mcdrich;
 > ;
//# sourceMappingURL=data:application/json;base64,